##########################################################################
##  v      #                  The Coq Proof Assistant                   ##
## <O___,, # CNRS-Ecole Polytechnique-INRIA Futurs-Universite Paris Sud ##
##   \VV/  #                                                            ##
##    //   #   Makefile automagically generated by coq_makefile V8.2    ##
##########################################################################

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

#
# This Makefile was generated by the command line :
# coq_makefile -f Make -o Makefile 
#

#########################
#                       #
# Libraries definition. #
#                       #
#########################

CAMLP4LIB:=$(shell $(CAMLBIN)camlp5 -where 2> /dev/null || $(CAMLBIN)camlp4 -where)
OCAMLLIBS:=-I $(CAMLP4LIB) 
COQLIBS:= -R . Semantics
COQDOCLIBS:=-R . Semantics

##########################
#                        #
# Variables definitions. #
#                        #
##########################

CAMLP4:=$(notdir $(CAMLP4LIB))
COQSRC:=$(COQTOP)
COQSRCLIBS:=-I $(COQTOP)/kernel -I $(COQTOP)/lib \
  -I $(COQTOP)/library -I $(COQTOP)/parsing \
  -I $(COQTOP)/pretyping -I $(COQTOP)/interp \
  -I $(COQTOP)/proofs -I $(COQTOP)/tactics \
  -I $(COQTOP)/toplevel -I $(COQTOP)/contrib/cc \
  -I $(COQTOP)/contrib/dp -I $(COQTOP)/contrib/extraction \
  -I $(COQTOP)/contrib/field -I $(COQTOP)/contrib/firstorder \
  -I $(COQTOP)/contrib/fourier -I $(COQTOP)/contrib/funind \
  -I $(COQTOP)/contrib/interface -I $(COQTOP)/contrib/jprover \
  -I $(COQTOP)/contrib/micromega -I $(COQTOP)/contrib/omega \
  -I $(COQTOP)/contrib/ring -I $(COQTOP)/contrib/romega \
  -I $(COQTOP)/contrib/rtauto -I $(COQTOP)/contrib/setoid_ring \
  -I $(COQTOP)/contrib/subtac -I $(COQTOP)/contrib/xml \
  -I $(CAMLP4LIB)
ZFLAGS:=$(OCAMLLIBS) $(COQSRCLIBS)
OPT:=
COQFLAGS:=-q $(OPT) $(COQLIBS) $(OTHERFLAGS) $(COQ_XML)
COQC:=$(COQBIN)coqc
COQDEP:=$(COQBIN)coqdep -c
GALLINA:=$(COQBIN)gallina
COQDOC:=$(COQBIN)coqdoc
CAMLC:=$(CAMLBIN)ocamlc -rectypes -c
CAMLOPTC:=$(CAMLBIN)ocamlopt -rectypes -c
CAMLLINK:=$(CAMLBIN)ocamlc -rectypes
CAMLOPTLINK:=$(CAMLBIN)ocamlopt -rectypes
GRAMMARS:=grammar.cma
CAMLP4EXTEND:=pa_extend.cmo pa_macro.cmo q_MLast.cmo
PP:=-pp "$(CAMLBIN)$(CAMLP4)o -I . -I $(COQTOP)/parsing $(CAMLP4EXTEND) $(GRAMMARS) -impl"

###################################
#                                 #
# Definition of the "all" target. #
#                                 #
###################################

VFILES:=abstract_i.v\
  axiom.v\
  constructs.v\
  context_sqrt.v\
  denot.v\
  example2.v\
  example.v\
  ex_i.v\
  extract_interpret.v\
  function_cpo.v\
  intervals.v\
  little.v\
  little_w_string.v\
  parser.v\
  syntax.v
VOFILES:=$(VFILES:.v=.vo)
GLOBFILES:=$(VFILES:.v=.glob)
VIFILES:=$(VFILES:.v=.vi)
GFILES:=$(VFILES:.v=.g)
HTMLFILES:=$(VFILES:.v=.html)
GHTMLFILES:=$(VFILES:.v=.g.html)
MLFILES:=interp.ml\
  str_little.ml
CMOFILES:=$(MLFILES:.ml=.cmo)

all: $(VOFILES) $(CMOFILES) llex.cmo\
  parse_little.cmo\
  little\
  parse_little.mli parse_little.ml\
  llex.ml\
  proof_sqrt.v\
  test_vcg.lil
spec: $(VIFILES)

gallina: $(GFILES)

html: $(GLOBFILES) $(VFILES)
	- mkdir html
	$(COQDOC) -toc -html $(COQDOCLIBS) -d html $(VFILES)

gallinahtml: $(GLOBFILES) $(VFILES)
	- mkdir html
	$(COQDOC) -toc -html -g $(COQDOCLIBS) -d html $(VFILES)

all.ps: $(VFILES)
	$(COQDOC) -toc -ps $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $(VFILES)`

all-gal.ps: $(VFILES)
	$(COQDOC) -toc -ps -g $(COQDOCLIBS) -o $@ `$(COQDEP) -sort -suffix .v $(VFILES)`



###################
#                 #
# Custom targets. #
#                 #
###################

llex.cmo: llex.ml parse_little.cmi
	$(CAMLBIN)ocamlc -rectypes -c llex.ml

parse_little.cmo: parse_little.cmi parse_little.ml interp.cmi str_little.cmo
	$(CAMLBIN)ocamlc -rectypes -c parse_little.ml

little: str_little.cmo interp.cmi interp.cmo parse_little.cmo llex.cmo little.ml
	$(CAMLBIN)ocamlc -rectypes -o little interp.cmo nums.cma str_little.cmo parse_little.cmo llex.cmo little.ml

parse_little.mli parse_little.ml: parse_little.mly
	$(CAMLBIN)ocamlyacc parse_little.mly

llex.ml: llex.mll
	$(CAMLBIN)ocamllex llex.mll

proof_sqrt.v: context_sqrt.v tail_sqrt.v sqrt.lil little
	./little -vcg-coq < sqrt.lil | cat context_sqrt.v - tail_sqrt.v > proof_sqrt.v

test_vcg.lil: ex_int.lil little
	./little -static-analysis < ex_int.lil > test_vcg.lil

####################
#                  #
# Special targets. #
#                  #
####################

.PHONY: all opt byte archclean clean install depend html

%.cmi: %.mli
	$(CAMLC) $(ZDEBUG) $(ZFLAGS) $<

%.cmo: %.ml
	$(CAMLC) $(ZDEBUG) $(ZFLAGS) $(PP) $<

%.cmx: %.ml
	$(CAMLOPTC) $(ZDEBUG) $(ZFLAGS) $(PP) $<

%.ml.d: %.ml
	$(CAMLBIN)ocamldep -slash $(ZFLAGS) $(PP) "$<" > "$@"

%.vo %.glob: %.v
	$(COQC) -dump-glob $*.glob $(COQDEBUG) $(COQFLAGS) $*

%.vi: %.v
	$(COQC) -i $(COQDEBUG) $(COQFLAGS) $*

%.g: %.v
	$(GALLINA) $<

%.tex: %.v
	$(COQDOC) -latex $< -o $@

%.html: %.v %.glob
	$(COQDOC) -glob-from $*.glob  -html $< -o $@

%.g.tex: %.v
	$(COQDOC) -latex -g $< -o $@

%.g.html: %.v %.glob
	$(COQDOC) -glob-from $*.glob -html -g $< -o $@

%.v.d: %.v
	$(COQDEP) -glob -slash $(COQLIBS) "$<" > "$@" || ( RV=$$?; rm -f "$@"; exit $${RV} )

byte:
	$(MAKE) all "OPT:=-byte"

opt:
	$(MAKE) all "OPT:=-opt"

install:
	mkdir -p `$(COQC) -where`/user-contrib
	cp -f $(VOFILES) `$(COQC) -where`/user-contrib
	cp -f *.cmo `$(COQC) -where`/user-contrib

Makefile: Make
	mv -f Makefile Makefile.bak
	$(COQBIN)coq_makefile -f Make -o Makefile


clean:
	rm -f *.cmo *.cmi *.cmx *.o $(VOFILES) $(VIFILES) $(GFILES) *~
	rm -f all.ps all-gal.ps all.glob $(VFILES:.v=.glob) $(HTMLFILES) $(GHTMLFILES) $(VFILES:.v=.tex) $(VFILES:.v=.g.tex) $(VFILES:.v=.v.d)
	rm -f $(CMOFILES) $(MLFILES:.ml=.cmi) $(MLFILES:.ml=.ml.d)
	- rm -rf html
	- rm -f llex.cmo
	- rm -f parse_little.cmo
	- rm -f little
	- rm -f parse_little.mli parse_little.ml
	- rm -f llex.ml
	- rm -f proof_sqrt.v
	- rm -f test_vcg.lil

archclean:
	rm -f *.cmx *.o


-include $(VFILES:.v=.v.d)
.SECONDARY: $(VFILES:.v=.v.d)

-include $(MLFILES:.ml=.ml.d)
.SECONDARY: $(MLFILES:.ml=.ml.d)

# WARNING
#
# This Makefile has been automagically generated
# Edit at your own risks !
#
# END OF WARNING

